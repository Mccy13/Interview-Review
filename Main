#defining classes and methods
class employee:
  def __init__(self, firstname, lastname, salary):
    self.firstname = firstname
    self.lastname = lastname
    self.salary = salary
    self.email = self.firstname + "." + self.lastname + "@company.com"

  def giveRaise(self, salary):
    self.salary = salary


#inheritance
class developer(employee):
  def __init__(self, lastname, firstname, salary, programming_languages):
    super().__init__(firstname, lastname, salary)
    self.prog_langs = programming_languages

  def addLanguages(self, lang):
    self.prog_langs += [lang]


employee1 = employee("Jon", "Smith", 80000)
print(employee1.salary)

employee1.giveRaise(100000)
print(employee1.salary)

dev1 = developer("Joe", "Montana", 100000, ["Python", "C"])
print(dev1.salary)

dev1.giveRaise(125000)
print(dev1.salary)

dev1.addLanguages("Java")
print(dev1.prog_langs)


#printing with string formatting

name = "Bob"

age = 25

string = "Hi my name is %s and I am %i years old." %(name, age)
print(string)

string1 = f"Hello, {name}"
print(string1)

string2 = f" 1 + 1 is {1 + 1}"
print(string2)


#data structures

#list ordered sequence have variable length 
#append, pop, insert, remove, sort, count, reverse, copy
#can use to mimic queue or stack

#list as stack
stack = []
stack.append(1)
stack.append(2)

pop_elem = stack.pop()

print(stack, pop_elem)

queue = []
queue.append(1)
queue.append(2)

pop_elem = queue.pop(0)

print(queue, pop_elem)


#set is data of iterable unique values
#add, remove, pop, union, intersection
#unique solution to question

set1 = set([1, 2, 4, 6])
set2 = set([1, 3, 5, 7])

intersection = set1 & set2

print(intersection)


#dictionary: map keys to value 
#efficient: 0(1) to look up key
#maps certain key to value

ages = dict()
ages["bob"] = 22
ages["emily"] = 20

for key, value in ages.items():
  print(key, value)


#list comprehension

lst = [1, 2, 3, 4, 6, 7]
even_lst = [x for x in lst if x % 2 == 0]
print(even_lst)

square_lst = [x ** 2 for x in lst]
print(square_lst)


#using standard libraries

from collections import defaultdict
#set default value for all possible unset keys

exam_grades = [("Bob", 100), ("Joe", 92), ("Emily", 95), ("Bob", 85), ("Joe", 87), ("Emily", 91)]

student_grades = defaultdict(list)
#map key to list of values

for name, grade in exam_grades:
  student_grades[name].append(grade)

print(student_grades)

print(student_grades["Rob"])
#key doesnt exist, returns empty list instead of keyerror


from collections import Counter

numbers = [1, 1, 5, 2, 3, 5, 2, 1, 4]

counts = Counter(numbers)

print(counts)
top2 = counts.most_common(2)
print(top2)
